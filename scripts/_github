#!/usr/bin/env bash

set -ex

source ./scripts/_init

GIT_TOKEN="${GIT_TOKEN:-}"
if [[ -z "$GIT_TOKEN" ]]; then
    stderr "[WARN] GIT_TOKEN is undefined"
fi

GITHUB_BASE_URL="https://git.soma.salesforce.com/api/v3/repos/salesforcedx/cli"

ghQueryRelease() {
    set +x
    TAG="v$SHORT_VERSION"

    RELEASE_JSON=$(curl -sSL -H "Accept: application/vnd.github.v3+json" "$GITHUB_BASE_URL/releases/tags/$TAG?access_token=$GIT_TOKEN")
    MESSAGE=$(echo "$RELEASE_JSON" | node -e "require('$ROOT_DIR/scripts/transform')((json)=>json.message)")
    if [[ "$MESSAGE" == "Not Found" ]]; then
        RELEASE_JSON=$(curl -X POST -H "Content-Type: application/vnd.github.v3+json" -d "{\"tag_name\":\"$TAG\"}" "$GITHUB_BASE_URL/releases?name=$ASSET_FILE_NAME&access_token=$GIT_TOKEN")
    fi

    echo "$RELEASE_JSON"
    set -x
}

ghAssetUrl() {
    set +x
    RELEASE_JSON="$1"
    ASSET="$2"
    echo "$RELEASE_JSON" | node -e "require('$ROOT_DIR/scripts/transform')((json)=>(json.assets.filter((a)=>a.name==='$ASSET')[0]||{}).url||'')"
    set -x
}

ghUploadUrl() {
    set +x
    RELEASE_JSON="$1"
    echo "$RELEASE_JSON" | node -e "require('$ROOT_DIR/scripts/transform')((json)=>json.upload_url.split('{')[0])"
    set -x
}

ghDeleteAssetIfExists() {
    set +x
    RELEASE_JSON="$1"
    ASSET_FILE_NAME="$2"

    ASSET_URL=$(ghAssetUrl "$RELEASE_JSON" "$ASSET_FILE_NAME")
    if [[ ! -z "$ASSET_URL" ]]; then
        echo "Deleting existing github release asset $ASSET_FILE_NAME at $ASSET_URL"
        curl -X DELETE "$ASSET_URL?access_token=$GIT_TOKEN"
    fi
    set -x
}

ghUploadAsset() {
    set +x
    ASSET_FILE_PATH="$1"
    ASSET_FILE_NAME="$2"

    RELEASE_JSON=$(ghQueryRelease)

    ghDeleteAssetIfExists "$RELEASE_JSON" "$ASSET_FILE_NAME"

    UPLOAD_URL=$(ghUploadUrl "$RELEASE_JSON")
    if [[ -z "$UPLOAD_URL" ]]; then
        stderr "No appropriate asset upload url found"
        exit 1
    fi

    echo "Uploading github release asset $ASSET_FILE_NAME to $UPLOAD_URL"
    curl -X POST --data-binary "@$ASSET_FILE_PATH" -H "Content-Type: application/octet-stream" "$UPLOAD_URL?name=$ASSET_FILE_NAME&access_token=$GIT_TOKEN"
    set -x
}

ghQueryAssetUrl() {
    set +x
    ASSET_FILE_NAME="$1"
    RELEASE_JSON=$(ghQueryRelease)
    set -x
    ghAssetUrl "$RELEASE_JSON" "$ASSET_FILE_NAME"
}

ghDownloadAsset() {
    set +x
    ASSET_FILE_NAME="$1"
    TAG="v$SHORT_VERSION"
    ASSET_URL=$(ghQueryAssetUrl "$ASSET_FILE_NAME")

    if [[ -z "$ASSET_URL" ]]; then
        stderr "No appropriate asset download url found for $ASSET_FILE_NAME"
        exit 1
    fi

    echo "Downloading github release asset $ASSET_FILE_NAME from $ASSET_URL"
    curl -L -H "Accept: application/octet-stream" "$ASSET_URL?access_token=$GIT_TOKEN" > "$ASSET_FILE_NAME"
    set -x
}

ghPollForAssetUrl() {
    ASSET_FILE_NAME="$1"
    TAG="v$SHORT_VERSION"

    declare -i attempts
    ASSET_URL=""
    until [[ "$ASSET_URL" != "" ]]; do
        if [[ $attempts -ge 60 ]]; then
            stderr "$ASSET_FILE_NAME never uploaded to release $TAG after 15 minutes"
            exit 1
        fi
        sleep 15
        attempts+=1
        ASSET_URL=$(ghQueryAssetUrl "$ASSET_FILE_NAME")
    done

    echo "$ASSET_URL"
}
