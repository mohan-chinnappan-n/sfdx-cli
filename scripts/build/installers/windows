#!/usr/bin/env bash

OS=windows

source ./scripts/_init

set -e

if [[ "${FORCE_BUILD:-}" == true || ! -e "$RELEASE_DIR/$INSTALLER_BASE_NAME-windows-x64.tar.gz" || ! -e "$RELEASE_DIR/$INSTALLER_BASE_NAME-windows-x86.tar.gz" ]]; then
    script "build/common"
    script "build/workspace"
    script "build/tarballs"
fi

function build () {
    set -x

    # setup workspace
    INSTALLER_BASE="$TMP_DIR/windows-$ARCH-installer"
    rm -rf "$INSTALLER_BASE"
    mkdir -p "$INSTALLER_BASE/bin"

    sed "s/REM @OVERRIDES@/set SFDX_INSTALLER=true\\&set BIN_NAME=$BIN_NAME/" \
        "$ROOT_DIR/bin/run.cmd" > "$INSTALLER_BASE/bin/$BIN_NAME.cmd"
    cp "$RESOURCES_DIR/exe/$BIN_NAME" "$INSTALLER_BASE/bin/$BIN_NAME"

    # add cross-spawn for bash->cmd support required by "$RESOURCES_DIR/exe/$BIN_NAME"
    cp "$RESOURCES_DIR/exe/spawn.js" "$INSTALLER_BASE/bin/spawn.js"
    cd "$INSTALLER_BASE/bin"
    npm install cross-spawn@6.0.5 --ignore-scripts --no-save --prefix .
    cd -

    tar xzf "$TGZ_PATH" -C "$TMP_DIR"
    mv "$TMP_DIR/$VERSIONED_BASE" "$INSTALLER_BASE/client"

    if [[ "$ARCH" == "x64" ]]; then
        PROGRAMSUFFIX="64"
    else
        PROGRAMSUFFIX=""
    fi

    WIN_VERSION=$(node -p "a='$SHORT_VERSION'.split('-');a[0]+'.'+(a.length===2?a[1]:0)")
    sed -e "s/@VERSION@/$WIN_VERSION/g" "resources/exe/$BIN_NAME.nsi" |\
        sed -e "s/@BIN_NAME@/$BIN_NAME/g" |\
        sed -e "s/@TITLE@/$PKG_DESC/g" |\
        sed -e "s/@INSTALL_DIR@/\$PROGRAMFILES$PROGRAMSUFFIX\\\\$PKG_DESC/g" \
        > "$INSTALLER_BASE/$BIN_NAME.nsi"

    makensis "$INSTALLER_BASE/$BIN_NAME.nsi" \
        | grep -v "\\[compress\\]" \
        | grep -v "^File: Descending to"

    set +x
    if [[ ! -z "${WINDOWS_SIGNING_KEY:-}" && ! -z "${WINDOWS_SIGNING_PASS:-}" ]]; then
        echo "$WINDOWS_SIGNING_KEY" | base64 --decode > "/tmp/$BIN_NAME-windows-key"
        set +e
        osslsigncode -pkcs12 "/tmp/$BIN_NAME-windows-key" \
            -pass "$WINDOWS_SIGNING_PASS" \
            -n "$PKG_DESC" \
            -i https://developer.salesforce.com/platform/dx/ \
            -t http://timestamp.verisign.com/scripts/timstamp.dll \
            -p "$HTTP_PROXY" \
            -in "$INSTALLER_BASE/installer.exe" \
            -out "$RELEASE_DIR/$PKG_NAME-$ARCH.exe"
        rm -f "/tmp/$BIN_NAME-windows-key"
        set -ex
        SIGNING_IDENTITY="salesforce.com, inc."
        if [[ "$(osslsigncode verify "$RELEASE_DIR/$PKG_NAME-$ARCH.exe" | grep "$SIGNING_IDENTITY" | uniq)" != *"$SIGNING_IDENTITY"* ]]; then
            stderr "Failed to find valid '$SIGNING_IDENTITY' signature on built installer product '$RELEASE_DIR/$PKG_NAME-$ARCH.exe'"
            exit 1
        fi
    else
        cp "$INSTALLER_BASE/installer.exe" "$RELEASE_DIR/$PKG_NAME-$ARCH.exe"
    fi
    set -x

    cp "$RELEASE_DIR/$PKG_NAME-$ARCH.exe" "$RELEASE_DIR/$INSTALLER_BASE_NAME-$ARCH.exe"
}

for ARCH in "${ARCHS[@]}"; do
    setarch "$ARCH"
    bg build
done
wait_all
