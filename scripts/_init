#!/usr/bin/env bash

# shellcheck disable=SC2034

# fail wait when any children fails
set -m

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic root dir from current file
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
cd "$ROOT_DIR"

function stderr() {
    set +x
    echo "$@" 1>&2
    set -x
}

function stdout() {
    set +x
    echo "$@"
    set -x
}

function script () {
    "$ROOT_DIR/scripts/$1"
}

# Set channel and version vars
CHANNEL=$(script "_vars/channel")
VERSION=$(script "_vars/version")
SHORT_VERSION=$(node -p "require('$ROOT_DIR/package.json').version")
DEB_VERSION="${SHORT_VERSION}-1"

# Set basic dir vars
TMP_DIR="$ROOT_DIR/tmp"
BASE_DIR="$TMP_DIR/base"
RELEASE_DIR="$ROOT_DIR/release"
RELEASE_VERSION_DIR="$RELEASE_DIR/v$VERSION"
RELEASE_APT_DIR="$RELEASE_DIR/apt"

# Determine pkg and bin names
PKG_NAME=$(node -p "require('$ROOT_DIR/package.json').name")
BIN_NAME=$(node -p "require('$ROOT_DIR/package.json')['cli-engine'].bin")

# Set s3 cache-control maxage constants
if [ "$CHANNEL" == "stable" ]; then
    VERSIONED_CACHE_CONTROL=86400     # 1 day
    UNVERSIONED_CACHE_CONTROL=300     # 5 minutes
    LATEST_VERSION_CACHE_CONTROL=60   # 1 minute
else
    VERSIONED_CACHE_CONTROL=0
    UNVERSIONED_CACHE_CONTROL=0
    LATEST_VERSION_CACHE_CONTROL=0
fi

# Set OS targets
OS_TARGETS=(
    "darwin"
    "linux"
    "windows"
)

# Ensure dirs are created
mkdir -p "$TMP_DIR"
mkdir -p "$RELEASE_DIR"
mkdir -p "$RELEASE_VERSION_DIR"

function archs () {
    if [[ "$OS" == "darwin" ]]; then
        echo "x64"
    elif [[ "$OS" == "windows" ]]; then
        echo "x64|x86"
    elif [[ "$OS" == "linux" ]]; then
        echo "x64|x86|arm"
    fi
}

function setos () {
    export OS="$1"
    if [[ ! -z "${ARCH:-}" ]]; then
        setarch "$ARCH"
    fi
}

function setarch () {
    export ARCH="$1"
    export VERSIONED_BASE="${PKG_NAME}-v${VERSION}-${OS}-${ARCH}"
    export UNVERSIONED_BASE="${PKG_NAME}-${OS}-${ARCH}"
    export WORKSPACE_DIR="$TMP_DIR/${OS}_${ARCH}"
    export TGZ_PATH="$RELEASE_DIR/$UNVERSIONED_BASE.tar.gz"
    export TXZ_PATH="$RELEASE_DIR/$UNVERSIONED_BASE.tar.xz"

    if [[ "$OS" = "linux" ]]; then
        if [[ "$ARCH" = "x64" ]]; then
            export DEB_ARCH="amd64"
        elif [[ "$ARCH" = "x86" ]]; then
            export DEB_ARCH="i386"
        elif [[ "$ARCH" = "arm" ]]; then
            export DEB_ARCH="armel"
        fi
        export VERSIONED_DEB_BASE="${BIN_NAME}_${DEB_VERSION}_$DEB_ARCH"
        export UNVERSIONED_DEB_BASE="${BIN_NAME}_$DEB_ARCH"
        export VERSIONED_DEB_PATH="$RELEASE_APT_DIR/$VERSIONED_DEB_BASE.deb"
        export UNVERSIONED_DEB_PATH="$RELEASE_APT_DIR/$UNVERSIONED_DEB_BASE.deb"
    fi
}

function bg () {
    "$@" &
    pids="${pids:-} $!"
}

function wait_all () {
    for pid in $pids; do
        wait "${pid}" || exit 1
    done
}

if [ ! -z "${OS:-}" ]; then
    setos "$OS"
    IFS='|' read -ra ARCHS <<< "$(archs)"
fi
