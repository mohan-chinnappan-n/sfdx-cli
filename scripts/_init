#!/usr/bin/env bash

# shellcheck disable=SC2034

# fail wait when any children fails
set -m

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

PATH="$PATH:node_modules/.bin"

# Set magic root dir from current file
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
cd "$ROOT_DIR"

function stderr() {
    set +x
    echo "$@" 1>&2
    set -x
}

function stdout() {
    set +x
    echo "$@"
    set -x
}

function script () {
    name="$1"
    shift
    "$ROOT_DIR/scripts/$name" "$@"
}

# Set channel and version vars
CHANNEL=$(script "_vars/channel")
VERSION=$(script "_vars/version")
SHORT_VERSION=$(node -p "require('$ROOT_DIR/package.json').version")
DEB_VERSION="${SHORT_VERSION}-1"

# Set basic dir vars
TMP_DIR="$ROOT_DIR/tmp"
BASE_DIR="$TMP_DIR/base"
RELEASE_DIR="$ROOT_DIR/release"
RESOURCES_DIR="$ROOT_DIR/resources"
RELEASE_VERSION_DIR="$RELEASE_DIR/v$VERSION"
RELEASE_APT_DIR="$RELEASE_DIR/apt"

# Determine pkg and bin names
PKG_NAME=$(node -p "require('$ROOT_DIR/package.json').name")
BIN_NAME=$(node -p "require('$ROOT_DIR/package.json')['cli-engine'].bin")

# S3 configuration

DEFAULT_S3_FOLDER=$(node -p "require('$ROOT_DIR/package.json')['cli-engine'].s3.folder")
S3_FOLDER="${S3_FOLDER:-"$DEFAULT_S3_FOLDER"}"
S3_CHANNEL_SUBFOLDER="$PKG_NAME/channels/$CHANNEL"
DEFAULT_S3_BUCKET=$(node -p "require('$ROOT_DIR/package.json')['cli-engine'].s3.bucket")
S3_BUCKET="${S3_BUCKET:-"$DEFAULT_S3_BUCKET"}"
S3_BASE_UPLOAD_URL="s3://$S3_BUCKET/$S3_FOLDER"
S3_CHANNEL_UPLOAD_URL="$S3_BASE_UPLOAD_URL/$S3_CHANNEL_SUBFOLDER"
DEFAULT_S3_HOST=$(node -p "require('$ROOT_DIR/package.json')['cli-engine'].s3.host")
S3_HOST="${S3_HOST:-"$DEFAULT_S3_HOST"}"
S3_HOST_SCHEME="${S3_HOST_SCHEME:-"https"}"
S3_HOST_BASE_URL="$S3_HOST_SCHEME://$S3_HOST/$S3_CHANNEL_SUBFOLDER"

function awsConfigureSetFromEnvVar() {
    if [ $# -ne 3 ]; then
        echo "assertion expected 3 arguments but received $#"
        exit 1
    fi

    if [[ ! -v "$1" ]] || [[ $(expr length "${!1}") -eq 0 ]]; then
        echo "Missing Env Variable for $1"
        exit 1
    fi

    aws configure set $2 ${!1} --profile $3
}

if [[ ! -v S3_ENDPOINT ]] || [[ ${#S3_ENDPOINT} -eq 0 ]]; then
    echo "S3_ENDPOINT is not specified. Specify an s3 host url or \"AWS\"".
fi

if [[ ! ${S3_ENDPOINT} -eq "AWS" ]]; then
    S3_ENDPOINT="--endpoint-url ${S3_ENDPOINT}"
    S3_PROFILE_NAME="sfdx"
    S3_PROFILE="--profile sfdx"
    awsConfigureSetFromEnvVar "S3_REGION" "region" $S3_PROFILE_NAME
    awsConfigureSetFromEnvVar "S3_ACCESS_KEY" "aws_access_key_id" $S3_PROFILE_NAME
    awsConfigureSetFromEnvVar "S3_SECRET" "aws_secret_access_key" $S3_PROFILE_NAME
    aws configure list $S3_PROFILE
else
    S3_ENDPOINT=""
    S3_PROFILE=""
fi

# S3 cache-control maxage constants
if [[ "$CHANNEL" == "stable" ]]; then
    VERSIONED_CACHE_CONTROL=86400     # 1 day
    UNVERSIONED_CACHE_CONTROL=300     # 5 minutes
    LATEST_VERSION_CACHE_CONTROL=60   # 1 minute
else
    VERSIONED_CACHE_CONTROL=0
    UNVERSIONED_CACHE_CONTROL=0
    LATEST_VERSION_CACHE_CONTROL=0
fi

# Set OS targets
OS_TARGETS=(
    "darwin"
    "linux"
    "windows"
)

# Ensure dirs are created
mkdir -p "$TMP_DIR"
mkdir -p "$RELEASE_DIR"
mkdir -p "$RELEASE_VERSION_DIR"

function archs () {
    if [[ "$OS" == "darwin" ]]; then
        echo "x64"
    elif [[ "$OS" == "windows" ]]; then
        echo "x64|x86"
    elif [[ "$OS" == "linux" ]]; then
        echo "x64|x86|arm"
    fi
}

function setos () {
    export OS="$1"
    if [[ ! -z "${ARCH:-}" ]]; then
        setarch "$ARCH"
    fi
}

function setarch () {
    export ARCH="$1"
    export VERSIONED_BASE="${PKG_NAME}-v${VERSION}-${OS}-${ARCH}"
    export UNVERSIONED_BASE="${PKG_NAME}-${OS}-${ARCH}"
    export WORKSPACE_DIR="$TMP_DIR/${OS}_${ARCH}"
    export TGZ_PATH="$RELEASE_DIR/$UNVERSIONED_BASE.tar.gz"
    export TXZ_PATH="$RELEASE_DIR/$UNVERSIONED_BASE.tar.xz"

    if [[ "$OS" = "linux" ]]; then
        if [[ "$ARCH" = "x64" ]]; then
            export DEB_ARCH="amd64"
        elif [[ "$ARCH" = "x86" ]]; then
            export DEB_ARCH="i386"
        elif [[ "$ARCH" = "arm" ]]; then
            export DEB_ARCH="armel"
        fi
        export VERSIONED_DEB_BASE="${BIN_NAME}_${DEB_VERSION}_$DEB_ARCH"
        export UNVERSIONED_DEB_BASE="${BIN_NAME}_$DEB_ARCH"
        export VERSIONED_DEB_PATH="$RELEASE_APT_DIR/$VERSIONED_DEB_BASE.deb"
        export UNVERSIONED_DEB_PATH="$RELEASE_APT_DIR/$UNVERSIONED_DEB_BASE.deb"
    fi
}

function bg () {
    "$@" &
    pids="${pids:-} $!"
}

function wait_all () {
    for pid in $pids; do
        wait "${pid}" || exit 1
    done
}

if [[ ! -z "${OS:-}" ]]; then
    setos "$OS"
    IFS='|' read -ra ARCHS <<< "$(archs)"
fi
