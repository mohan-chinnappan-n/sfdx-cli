#!/usr/bin/env bash

# shellcheck disable=SC2034

# Fail wait when any children fail
set -m

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

PATH="node_modules/.bin:$PATH"

# Set magic root dir from current file
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
cd "$ROOT_DIR"

function stderr() {
    set +x
    echo "$@" 1>&2
    set -x
}

function stdout() {
    set +x
    echo "$@"
    set -x
}

function script () {
    name="$1"
    shift
    execute_script="----------------- $name -----------------"
    "$ROOT_DIR/scripts/$name" "$@"
}

function sha() {
    if [[ -x "$(command -v shasum)" ]]; then
        digest=$(shasum -a 256 < "$1" | awk '{print $1}')
    elif [[ -x "$(command -v sha256sum)" ]]; then
        digest=$(sha256sum < "$1" | awk '{print $1}')
    elif [[ -x "$(command -v openssl)" ]]; then
        # Use sed to portably strip the "(stdin)= " prefix present on some systems
        digest=$(openssl dgst -sha256 < "$1" | sed 's/^.* //')
    else
        stderr "No command found to generate sha256 sums"
        exit 1
    fi
    echo "$digest"
}

function len() {
    echo ${#1}
}

function archs () {
    if [[ "$OS" == "darwin" ]]; then
        echo "x64"
    elif [[ "$OS" == "windows" ]]; then
        echo "x64|x86"
    elif [[ "$OS" == "linux" ]]; then
        echo "x64|arm"
    fi
}

function setos () {
    export OS="$1"
    if [[ ! -z "${ARCH:-}" ]]; then
        setarch "$ARCH"
    fi
}

function setarch () {
    export ARCH="$1"
    export VERSIONED_BASE="${PKG_NAME}-v${VERSION}-${OS}-${ARCH}"
    export UNVERSIONED_BASE="${PKG_NAME}-${OS}-${ARCH}"
    export WORKSPACE_DIR="$TMP_DIR/${OS}_${ARCH}"
    export TGZ_PATH="$RELEASE_DIR/$UNVERSIONED_BASE.tar.gz"
    export TXZ_PATH="$RELEASE_DIR/$UNVERSIONED_BASE.tar.xz"
}

function bg () {
    "$@" &
    pids="${pids:-} $!"
}

function wait_all () {
    for pid in $pids; do
        wait "${pid}" || exit 1
    done
}

function createManifest () {
    rm -f "$RELEASE_DIR/manifest.json"
    script "manifest.js" "$RELEASE_DIR/manifest.json" version="$VERSION" channel="$CHANNEL"
}

function createReleases () {
    rm -f "$RELEASE_DIR/releases.json"
    script "releases.js" "$RELEASE_DIR/releases.json" "$S3_ENDPOINT" "$S3_BUCKET" "$S3_FOLDER" "$VERSION" "$CHANNEL"
}

function addToManifest () {
    SECTION="$1"
    FILE_KEY="$2"
    FILE_URL="$3"
    SRC_FILE_PATH="$4"

    keys=()
    keys+=("${SECTION}.${FILE_KEY}.url=$FILE_URL")
    keys+=("${SECTION}.${FILE_KEY}.sha256=$(sha "$SRC_FILE_PATH")")
    keys+=("${SECTION}.${FILE_KEY}.bytes=$(wc -c < "$SRC_FILE_PATH" | awk '{print $1}')")

    script "manifest.js" "$RELEASE_DIR/manifest.json" "${keys[@]}"
}

# Set channel and version vars
CHANNEL=$(script "_vars/channel")
VERSION=$(script "_vars/version")
SHORT_VERSION=$(node -p "require('$ROOT_DIR/package.json').version")

# Set basic dir vars
TMP_DIR="$ROOT_DIR/tmp"
BASE_DIR="$TMP_DIR/base"
RELEASE_DIR="$ROOT_DIR/release"
RESOURCES_DIR="$ROOT_DIR/resources"
RELEASE_VERSION_DIR="$RELEASE_DIR/v$VERSION"
RELEASE_APT_DIR="$RELEASE_DIR/apt"

# Determine pkg and bin names
PKG_NAME=$(node -p "require('$ROOT_DIR/package.json').name")
PKG_DESC=$(node -p "require('$ROOT_DIR/package.json').description")
BIN_NAME=$(node -p "require('$ROOT_DIR/package.json').oclif.bin")

# Determine node versions
NODE_VERSION=$(node -p "require('./package.json').oclif.node || process.versions.node")
NODE_REQUIRED=$(node -p "require('./package.json').engines.node || process.versions.node")

# S3 configuration
DEFAULT_S3_FOLDER=$(node -p "require('$ROOT_DIR/package.json').oclif.update.s3.folder")
S3_FOLDER="${S3_FOLDER:-"$DEFAULT_S3_FOLDER"}"
S3_CHANNEL_SUBFOLDER="$PKG_NAME/channels/$CHANNEL"
DEFAULT_S3_BUCKET=$(node -p "require('$ROOT_DIR/package.json').oclif.update.s3.bucket")
S3_BUCKET="${S3_BUCKET:-"$DEFAULT_S3_BUCKET"}"
S3_BASE_UPLOAD_URL="s3://$S3_BUCKET/$S3_FOLDER"
S3_CHANNEL_UPLOAD_URL="$S3_BASE_UPLOAD_URL/$S3_CHANNEL_SUBFOLDER"
DEFAULT_S3_HOST=$(node -p "require('$ROOT_DIR/package.json').oclif.update.s3.host")
S3_HOST="${S3_HOST:-"$DEFAULT_S3_HOST"}"
S3_HOST_BASE_URL="$S3_HOST"
S3_HOST_CHANNEL_BASE_URL="$S3_HOST_BASE_URL/$S3_CHANNEL_SUBFOLDER"
S3_PROFILE_NAME="sfdx"
S3_ENDPOINT="${S3_ENDPOINT:-AWS}"
S3_CACHE_DIR="$TMP_DIR/s3"

# Set OS targets
OS_TARGETS=(
    "darwin"
    "linux"
    "windows"
)

if [[ ! -z "${OS:-}" ]]; then
    setos "$OS"
    IFS='|' read -ra ARCHS <<< "$(archs)"
fi

INSTALLER_BASE_NAME="$PKG_NAME-v$VERSION"
