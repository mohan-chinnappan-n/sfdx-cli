#!groovy
@Library(['sfci-pipeline-sharedlib@master', 'mobe-pipeline@master']) _
import com.salesforce.mobe.*
import net.sfdc.dci.BuildUtils
import net.sfdc.dci.ExecutionHandler
import net.sfdc.dci.LogUtil
import net.sfdc.dci.GitHubUtils

env.SHARE_LIB_VERSION = 'v1'
env.RELEASE_BRANCHES = ['master', 'v.*'] // these are regexp, not globs!
def XCODE_VERSION = "11.5"
Map config = [xcodeLookup: Xcode.V11_5]

String buildDir = "build"
String version = ''
String pkgPath = ''
String originalFileName = ''
String pkgFinalName = ''

nodeWithXcode(config) {

    stage('Initialize and Install Code and Deps') {
        ExecutionHandler.getInstance(this, env.SHARE_LIB_VERSION)
        withEnv(Stage.getDefaultEnv()) {
            def autoDistributeToAppCenter = { false }
            def autoDistributeToTestFlight = { false }
            def extraParameters = []
            Stage.runInit(this, XCODE_VERSION, BuildUtils.isPullRequestBuild(env), '', autoDistributeToAppCenter, autoDistributeToTestFlight, extraParameters)
            Stage.runCheckoutSourceCode(this)
        }
    }

    stage('Download Binary') {
        withEnv(Stage.getDefaultEnv()) {
           withCredentials([usernamePassword(credentialsId: 'sfci-git', usernameVariable: 'GIT_USERNAME_NOT_USED', passwordVariable: 'GIT_TOKEN')]) {
             try {                   
                sh("if [ ! -d ${buildDir} ]; then mkdir ${env.WORKSPACE}/build; fi")
                                
                version = sh (script: '''
                  curl -s -u "${GIT_USERNAME}":"${GIT_TOKEN}" https://git.soma.salesforce.com/api/v3/repos/salesforcedx/cli/releases/latest | grep tag_name | cut -d '"' -f 4
                  ''', returnStdout: true).trim()
                  
                if (version.endsWith("Signed")) {
                  currentBuild.result = 'ABORTED'
                  error('Current Release is already signed')
                }  
                                                      
                echo "version is ${version}"
                 
                dir (buildDir) {
                  sh '''
                      NAME="darwin-x64.tar.xz"
                      GH_REPO="https://git.soma.salesforce.com/api/v3/repos/salesforcedx/cli"
                      AUTH="${GIT_USERNAME}:${GIT_TOKEN}"
                      TAG=$(curl -s -u $AUTH $GH_REPO/releases/latest | grep tag_name | cut -d '"' -f 4)
                      echo "tag is $TAG"
                      TAG=${TAG%-Signed}
                      echo "tag is now $TAG"
                      response=$(curl -s -u $AUTH $GH_REPO/releases/tags/$TAG)
                      eval $(echo "$response" | grep -C3 "name.:.\\+$NAME" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
                      [ "$id" ] || { echo "Error: Failed to get asset id, response: $response" | awk 'length($0)<100' >&2; exit 1; }
                      GH_ASSET_URL="$GH_REPO/releases/assets/$id"
                      echo "downloading asset..." >&2
                      curl -LJO  -H 'Accept: application/octet-stream' -H "Authorization: token ${GIT_TOKEN}" $GH_ASSET_URL
                  '''
                  originalFileName = sh (script: 'find . -name "*darwin-x64*"', returnStdout: true)                  
                  echo "extracting asset ${originalFileName}"
                  sh "tar -xJf ${originalFileName}"
                  sh "rm ${originalFileName}"
                  
                  originalFileName = originalFileName.getAt(2..originalFileName.length() - 2)
                  originalFileName = originalFileName.replaceAll('.tar.xz','')
                  
                  echo "originalFileName is now ${originalFileName}"
                  
                }
              } catch (e) {
                  LogUtil.info(this, "Failed while downloading binary", LogUtil.StepStatus.STARTED, System.currentTimeMillis(), LogUtil.LogType.LOG_ONLY)
                  throw e
              }  
           }    
        }
    }

    stage('Package and Notarize') {
          CodeSigningAsset[] additionalCodeSigningAssets = [new CodeSigningAsset(AppleTeam.APPSTORE_62J96EUJ9N, CodeSigningType.MAC_INSTALLER_DISTRIBUTION, '2025-03-14')]
          MacOSUtils.createKeychain(this, additionalCodeSigningAssets)
            withEnv(Stage.getDefaultEnv()) {
              try {   

                dir (buildDir) {
        
                echo 'Printing build directory path'
                sh 'pwd'
      
                sh " mkdir ${env.WORKSPACE}/build/installScripts "
                
                pkgFinalName = originalFileName.replaceAll('-darwin-x64','') + '.pkg'
        
                pkgPath = "${env.WORKSPACE}/build"  
          
                echo "pkgPath is ${pkgPath}"   
        
                String originalFile = "${env.WORKSPACE}/build/${originalFileName}"
                String installScriptDir = "${env.WORKSPACE}/build/installScripts"
                String repoScriptDir = "${env.WORKSPACE}/resources/darwin/scripts"
        
                versionNumber = version.getAt(1..version.length() - 1)
        
                echo "versionNumber is ${versionNumber}"   
                    
                sh "cp ${repoScriptDir}/postinstall ${installScriptDir}"
                sh "cp ${repoScriptDir}/preinstall ${installScriptDir}" 
                
                Map params = [
                    projectVersion: versionNumber,
                    projectPath: originalFile,
                    pkgDestinationPath: pkgPath,
                    pkgName: pkgFinalName,
                    pkgScriptDirectory: "${installScriptDir}",
                    pkgInstalLocation: '/usr/local/lib/sfdx',
                    bundleId: 'com.salesforce.developer.cli',
                    signingIdentity: 'Developer ID Installer: salesforce.com (62J96EUJ9N)'
                ]
                
                echo "params is ${params}"   
                
                
                MacOSUtils.packageAndNotarize(this, params)
                
             }
           } catch (e) {
               LogUtil.info(this, "Failed while packaging or notarizing", LogUtil.StepStatus.STARTED, System.currentTimeMillis(), LogUtil.LogType.LOG_ONLY)
               throw e
           }
        }
    }
    
    stage('Post and Archive') {
        withEnv(Stage.getDefaultEnv()) {
        
        echo "------------------------- Step: Posting to Github -------------------------"
        
        String tag = version.trim() + "-Signed"  
        
        def assets = ["${pkgFinalName}": "${pkgPath}/${pkgFinalName}"]
        
        Stage.createReleaseWithAssetsByTag(this, tag, false, assets)
             
        echo "------------------------- Step: Archiving -------------------------"
             
        archiveArtifacts(allowEmptyArchive: true, artifacts:"build/*pkg*")
          
        }
    }
}

